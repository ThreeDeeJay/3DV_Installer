# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: 3DV_Installer

on:
  push:
    branches: master

jobs:

  build:

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install 7-Zip
      shell: cmd
      run: |
        choco install 7zip -y
          
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    # Run dotnet as a publish step so we can make single-file
    # publish has some new bug, so we need to use .csproj as target
    - name: Publish
      run: dotnet publish --output "./" --runtime win10-x64 --configuration Release  -p:PublishSingleFile=true -p:PublishTrimmed=true --self-contained true 3DV_Installer.csproj

    # Unzip the NVidia 3D Vision Driver installer, so that it does not need to exist at launch.
    - name: Unzip 3DVision.exe
      run: 7z x .\NVidia\3DVision.Exe "-o.\3DVisionDriver" -y
      
    # Use 7z to zip up entire package for better compression.
    # '3DVisionDriver\' will take all items and keep folder name.
    # 'Extras\' will take both resource.dat and rcedit.exe and keep folder name.
    - name: 7z all
      run: 7z a .\3DV_Installer.7z 3DVisionDriver\ Extras\ .\3DV_installer.exe
      
    # Upload the package: https://github.com/marketplace/actions/upload-a-build-artifact
    # Grab the Tools and NVidia folders as needed components to make a full zip archive.
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        path: 3DV_Installer.7z
          
